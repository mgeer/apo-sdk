/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef ApolloService_H
#define ApolloService_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include "apollo_types.h"

namespace apollo { namespace rpc { namespace api {

#ifdef _WIN32
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class ApolloServiceIf {
 public:
  virtual ~ApolloServiceIf() {}
  virtual void feature(FeatureResponse& _return, const FeatureRequest& request) = 0;
  virtual void select(SelectResponse& _return, const SelectRequest& request) = 0;
};

class ApolloServiceIfFactory {
 public:
  typedef ApolloServiceIf Handler;

  virtual ~ApolloServiceIfFactory() {}

  virtual ApolloServiceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(ApolloServiceIf* /* handler */) = 0;
};

class ApolloServiceIfSingletonFactory : virtual public ApolloServiceIfFactory {
 public:
  ApolloServiceIfSingletonFactory(const boost::shared_ptr<ApolloServiceIf>& iface) : iface_(iface) {}
  virtual ~ApolloServiceIfSingletonFactory() {}

  virtual ApolloServiceIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(ApolloServiceIf* /* handler */) {}

 protected:
  boost::shared_ptr<ApolloServiceIf> iface_;
};

class ApolloServiceNull : virtual public ApolloServiceIf {
 public:
  virtual ~ApolloServiceNull() {}
  void feature(FeatureResponse& /* _return */, const FeatureRequest& /* request */) {
    return;
  }
  void select(SelectResponse& /* _return */, const SelectRequest& /* request */) {
    return;
  }
};

typedef struct _ApolloService_feature_args__isset {
  _ApolloService_feature_args__isset() : request(false) {}
  bool request :1;
} _ApolloService_feature_args__isset;

class ApolloService_feature_args {
 public:

  ApolloService_feature_args(const ApolloService_feature_args&);
  ApolloService_feature_args& operator=(const ApolloService_feature_args&);
  ApolloService_feature_args() {
  }

  virtual ~ApolloService_feature_args() throw();
  FeatureRequest request;

  _ApolloService_feature_args__isset __isset;

  void __set_request(const FeatureRequest& val);

  bool operator == (const ApolloService_feature_args & rhs) const
  {
    if (!(request == rhs.request))
      return false;
    return true;
  }
  bool operator != (const ApolloService_feature_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ApolloService_feature_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ApolloService_feature_pargs {
 public:


  virtual ~ApolloService_feature_pargs() throw();
  const FeatureRequest* request;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ApolloService_feature_result__isset {
  _ApolloService_feature_result__isset() : success(false) {}
  bool success :1;
} _ApolloService_feature_result__isset;

class ApolloService_feature_result {
 public:

  ApolloService_feature_result(const ApolloService_feature_result&);
  ApolloService_feature_result& operator=(const ApolloService_feature_result&);
  ApolloService_feature_result() {
  }

  virtual ~ApolloService_feature_result() throw();
  FeatureResponse success;

  _ApolloService_feature_result__isset __isset;

  void __set_success(const FeatureResponse& val);

  bool operator == (const ApolloService_feature_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const ApolloService_feature_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ApolloService_feature_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ApolloService_feature_presult__isset {
  _ApolloService_feature_presult__isset() : success(false) {}
  bool success :1;
} _ApolloService_feature_presult__isset;

class ApolloService_feature_presult {
 public:


  virtual ~ApolloService_feature_presult() throw();
  FeatureResponse* success;

  _ApolloService_feature_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ApolloService_select_args__isset {
  _ApolloService_select_args__isset() : request(false) {}
  bool request :1;
} _ApolloService_select_args__isset;

class ApolloService_select_args {
 public:

  ApolloService_select_args(const ApolloService_select_args&);
  ApolloService_select_args& operator=(const ApolloService_select_args&);
  ApolloService_select_args() {
  }

  virtual ~ApolloService_select_args() throw();
  SelectRequest request;

  _ApolloService_select_args__isset __isset;

  void __set_request(const SelectRequest& val);

  bool operator == (const ApolloService_select_args & rhs) const
  {
    if (!(request == rhs.request))
      return false;
    return true;
  }
  bool operator != (const ApolloService_select_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ApolloService_select_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ApolloService_select_pargs {
 public:


  virtual ~ApolloService_select_pargs() throw();
  const SelectRequest* request;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ApolloService_select_result__isset {
  _ApolloService_select_result__isset() : success(false) {}
  bool success :1;
} _ApolloService_select_result__isset;

class ApolloService_select_result {
 public:

  ApolloService_select_result(const ApolloService_select_result&);
  ApolloService_select_result& operator=(const ApolloService_select_result&);
  ApolloService_select_result() {
  }

  virtual ~ApolloService_select_result() throw();
  SelectResponse success;

  _ApolloService_select_result__isset __isset;

  void __set_success(const SelectResponse& val);

  bool operator == (const ApolloService_select_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const ApolloService_select_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ApolloService_select_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ApolloService_select_presult__isset {
  _ApolloService_select_presult__isset() : success(false) {}
  bool success :1;
} _ApolloService_select_presult__isset;

class ApolloService_select_presult {
 public:


  virtual ~ApolloService_select_presult() throw();
  SelectResponse* success;

  _ApolloService_select_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class ApolloServiceClient : virtual public ApolloServiceIf {
 public:
  ApolloServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  ApolloServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void feature(FeatureResponse& _return, const FeatureRequest& request);
  void send_feature(const FeatureRequest& request);
  void recv_feature(FeatureResponse& _return);
  void select(SelectResponse& _return, const SelectRequest& request);
  void send_select(const SelectRequest& request);
  void recv_select(SelectResponse& _return);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class ApolloServiceProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<ApolloServiceIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (ApolloServiceProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_feature(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_select(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  ApolloServiceProcessor(boost::shared_ptr<ApolloServiceIf> iface) :
    iface_(iface) {
    processMap_["feature"] = &ApolloServiceProcessor::process_feature;
    processMap_["select"] = &ApolloServiceProcessor::process_select;
  }

  virtual ~ApolloServiceProcessor() {}
};

class ApolloServiceProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  ApolloServiceProcessorFactory(const ::boost::shared_ptr< ApolloServiceIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< ApolloServiceIfFactory > handlerFactory_;
};

class ApolloServiceMultiface : virtual public ApolloServiceIf {
 public:
  ApolloServiceMultiface(std::vector<boost::shared_ptr<ApolloServiceIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~ApolloServiceMultiface() {}
 protected:
  std::vector<boost::shared_ptr<ApolloServiceIf> > ifaces_;
  ApolloServiceMultiface() {}
  void add(boost::shared_ptr<ApolloServiceIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void feature(FeatureResponse& _return, const FeatureRequest& request) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->feature(_return, request);
    }
    ifaces_[i]->feature(_return, request);
    return;
  }

  void select(SelectResponse& _return, const SelectRequest& request) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->select(_return, request);
    }
    ifaces_[i]->select(_return, request);
    return;
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class ApolloServiceConcurrentClient : virtual public ApolloServiceIf {
 public:
  ApolloServiceConcurrentClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  ApolloServiceConcurrentClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void feature(FeatureResponse& _return, const FeatureRequest& request);
  int32_t send_feature(const FeatureRequest& request);
  void recv_feature(FeatureResponse& _return, const int32_t seqid);
  void select(SelectResponse& _return, const SelectRequest& request);
  int32_t send_select(const SelectRequest& request);
  void recv_select(SelectResponse& _return, const int32_t seqid);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  ::apache::thrift::async::TConcurrentClientSyncInfo sync_;
};

#ifdef _WIN32
  #pragma warning( pop )
#endif

}}} // namespace

#endif
