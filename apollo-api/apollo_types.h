/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef apollo_TYPES_H
#define apollo_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/cxxfunctional.h>


namespace apollo { namespace rpc { namespace api {

class Experiment;

class UserToIdentity;

class FeatureRequest;

class FeatureResult;

class FeatureResponse;

class SelectRequest;

class SelectResult;

class SelectResponse;

typedef struct _Experiment__isset {
  _Experiment__isset() : testKey(false), arguments(false) {}
  bool testKey :1;
  bool arguments :1;
} _Experiment__isset;

class Experiment {
 public:

  Experiment(const Experiment&);
  Experiment& operator=(const Experiment&);
  Experiment() : testKey() {
  }

  virtual ~Experiment() throw();
  std::string testKey;
  std::map<std::string, std::string>  arguments;

  _Experiment__isset __isset;

  void __set_testKey(const std::string& val);

  void __set_arguments(const std::map<std::string, std::string> & val);

  bool operator == (const Experiment & rhs) const
  {
    if (!(testKey == rhs.testKey))
      return false;
    if (!(arguments == rhs.arguments))
      return false;
    return true;
  }
  bool operator != (const Experiment &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Experiment & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(Experiment &a, Experiment &b);

inline std::ostream& operator<<(std::ostream& out, const Experiment& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _UserToIdentity__isset {
  _UserToIdentity__isset() : key(false), properties(false) {}
  bool key :1;
  bool properties :1;
} _UserToIdentity__isset;

class UserToIdentity {
 public:

  UserToIdentity(const UserToIdentity&);
  UserToIdentity& operator=(const UserToIdentity&);
  UserToIdentity() : key() {
  }

  virtual ~UserToIdentity() throw();
  std::string key;
  std::map<std::string, std::string>  properties;

  _UserToIdentity__isset __isset;

  void __set_key(const std::string& val);

  void __set_properties(const std::map<std::string, std::string> & val);

  bool operator == (const UserToIdentity & rhs) const
  {
    if (!(key == rhs.key))
      return false;
    if (!(properties == rhs.properties))
      return false;
    return true;
  }
  bool operator != (const UserToIdentity &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const UserToIdentity & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(UserToIdentity &a, UserToIdentity &b);

inline std::ostream& operator<<(std::ostream& out, const UserToIdentity& obj)
{
  obj.printTo(out);
  return out;
}


class FeatureRequest {
 public:

  FeatureRequest(const FeatureRequest&);
  FeatureRequest& operator=(const FeatureRequest&);
  FeatureRequest() : ns(), logId(0) {
  }

  virtual ~FeatureRequest() throw();
  std::string ns;
  std::vector<std::string>  names;
  int64_t logId;
  UserToIdentity user;

  void __set_ns(const std::string& val);

  void __set_names(const std::vector<std::string> & val);

  void __set_logId(const int64_t val);

  void __set_user(const UserToIdentity& val);

  bool operator == (const FeatureRequest & rhs) const
  {
    if (!(ns == rhs.ns))
      return false;
    if (!(names == rhs.names))
      return false;
    if (!(logId == rhs.logId))
      return false;
    if (!(user == rhs.user))
      return false;
    return true;
  }
  bool operator != (const FeatureRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FeatureRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(FeatureRequest &a, FeatureRequest &b);

inline std::ostream& operator<<(std::ostream& out, const FeatureRequest& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _FeatureResult__isset {
  _FeatureResult__isset() : experiment(false) {}
  bool experiment :1;
} _FeatureResult__isset;

class FeatureResult {
 public:

  FeatureResult(const FeatureResult&);
  FeatureResult& operator=(const FeatureResult&);
  FeatureResult() : name(), allow(0) {
  }

  virtual ~FeatureResult() throw();
  std::string name;
  bool allow;
  Experiment experiment;

  _FeatureResult__isset __isset;

  void __set_name(const std::string& val);

  void __set_allow(const bool val);

  void __set_experiment(const Experiment& val);

  bool operator == (const FeatureResult & rhs) const
  {
    if (!(name == rhs.name))
      return false;
    if (!(allow == rhs.allow))
      return false;
    if (__isset.experiment != rhs.__isset.experiment)
      return false;
    else if (__isset.experiment && !(experiment == rhs.experiment))
      return false;
    return true;
  }
  bool operator != (const FeatureResult &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FeatureResult & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(FeatureResult &a, FeatureResult &b);

inline std::ostream& operator<<(std::ostream& out, const FeatureResult& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _FeatureResponse__isset {
  _FeatureResponse__isset() : message(false), results(false) {}
  bool message :1;
  bool results :1;
} _FeatureResponse__isset;

class FeatureResponse {
 public:

  FeatureResponse(const FeatureResponse&);
  FeatureResponse& operator=(const FeatureResponse&);
  FeatureResponse() : code(0), message() {
  }

  virtual ~FeatureResponse() throw();
  int32_t code;
  std::string message;
  std::vector<FeatureResult>  results;

  _FeatureResponse__isset __isset;

  void __set_code(const int32_t val);

  void __set_message(const std::string& val);

  void __set_results(const std::vector<FeatureResult> & val);

  bool operator == (const FeatureResponse & rhs) const
  {
    if (!(code == rhs.code))
      return false;
    if (__isset.message != rhs.__isset.message)
      return false;
    else if (__isset.message && !(message == rhs.message))
      return false;
    if (!(results == rhs.results))
      return false;
    return true;
  }
  bool operator != (const FeatureResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FeatureResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(FeatureResponse &a, FeatureResponse &b);

inline std::ostream& operator<<(std::ostream& out, const FeatureResponse& obj)
{
  obj.printTo(out);
  return out;
}


class SelectRequest {
 public:

  SelectRequest(const SelectRequest&);
  SelectRequest& operator=(const SelectRequest&);
  SelectRequest() : ns(), name(), logId(0) {
  }

  virtual ~SelectRequest() throw();
  std::string ns;
  std::string name;
  int64_t logId;
  std::vector<UserToIdentity>  users;

  void __set_ns(const std::string& val);

  void __set_name(const std::string& val);

  void __set_logId(const int64_t val);

  void __set_users(const std::vector<UserToIdentity> & val);

  bool operator == (const SelectRequest & rhs) const
  {
    if (!(ns == rhs.ns))
      return false;
    if (!(name == rhs.name))
      return false;
    if (!(logId == rhs.logId))
      return false;
    if (!(users == rhs.users))
      return false;
    return true;
  }
  bool operator != (const SelectRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SelectRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(SelectRequest &a, SelectRequest &b);

inline std::ostream& operator<<(std::ostream& out, const SelectRequest& obj)
{
  obj.printTo(out);
  return out;
}


class SelectResult {
 public:

  SelectResult(const SelectResult&);
  SelectResult& operator=(const SelectResult&);
  SelectResult() : key(), allow(0) {
  }

  virtual ~SelectResult() throw();
  std::string key;
  bool allow;

  void __set_key(const std::string& val);

  void __set_allow(const bool val);

  bool operator == (const SelectResult & rhs) const
  {
    if (!(key == rhs.key))
      return false;
    if (!(allow == rhs.allow))
      return false;
    return true;
  }
  bool operator != (const SelectResult &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SelectResult & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(SelectResult &a, SelectResult &b);

inline std::ostream& operator<<(std::ostream& out, const SelectResult& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _SelectResponse__isset {
  _SelectResponse__isset() : message(false), results(false) {}
  bool message :1;
  bool results :1;
} _SelectResponse__isset;

class SelectResponse {
 public:

  SelectResponse(const SelectResponse&);
  SelectResponse& operator=(const SelectResponse&);
  SelectResponse() : code(0), message() {
  }

  virtual ~SelectResponse() throw();
  int32_t code;
  std::string message;
  std::vector<SelectResult>  results;

  _SelectResponse__isset __isset;

  void __set_code(const int32_t val);

  void __set_message(const std::string& val);

  void __set_results(const std::vector<SelectResult> & val);

  bool operator == (const SelectResponse & rhs) const
  {
    if (!(code == rhs.code))
      return false;
    if (__isset.message != rhs.__isset.message)
      return false;
    else if (__isset.message && !(message == rhs.message))
      return false;
    if (!(results == rhs.results))
      return false;
    return true;
  }
  bool operator != (const SelectResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SelectResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(SelectResponse &a, SelectResponse &b);

inline std::ostream& operator<<(std::ostream& out, const SelectResponse& obj)
{
  obj.printTo(out);
  return out;
}

}}} // namespace

#endif
